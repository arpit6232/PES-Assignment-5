          pbkdf2_hmac_isha:
00000938:   push    {r4, r5, r6, r7, lr}
0000093a:   ldr     r4, [pc, #264]  ; (0xa44 <pbkdf2_hmac_isha+268>)
0000093c:   add     sp, r4
0000093e:   add     r7, sp, #16
00000940:   str     r0, [r7, #12]
00000942:   str     r1, [r7, #8]
00000944:   str     r2, [r7, #4]
00000946:   str     r3, [r7, #0]
114         assert(dkLen < sizeof(accumulator));
00000948:   ldr     r3, [pc, #252]  ; (0xa48 <pbkdf2_hmac_isha+272>)
0000094a:   movs    r2, #8
0000094c:   mov     r12, r2
0000094e:   add     r12, r7
00000950:   add     r3, r12
00000952:   ldr     r2, [r3, #0]
00000954:   movs    r3, #160        ; 0xa0
00000956:   lsls    r3, r3, #4
00000958:   cmp     r2, r3
0000095a:   bcc.n   0x964 <pbkdf2_hmac_isha+44>
0000095c:   ldr     r3, [pc, #236]  ; (0xa4c <pbkdf2_hmac_isha+276>)
0000095e:   movs    r0, r3
00000960:   bl      0x2264 <__assertion_failed>
116         int l = dkLen / ISHA_DIGESTLEN + 1;
00000964:   ldr     r3, [pc, #224]  ; (0xa48 <pbkdf2_hmac_isha+272>)
00000966:   movs    r2, #8
00000968:   mov     r12, r2
0000096a:   add     r12, r7
0000096c:   add     r3, r12
0000096e:   ldr     r3, [r3, #0]
00000970:   movs    r1, #20
00000972:   movs    r0, r3
00000974:   bl      0x41d0 <__aeabi_uidivmod>
00000978:   movs    r3, r0
0000097a:   adds    r3, #1
0000097c:   ldr     r2, [pc, #208]  ; (0xa50 <pbkdf2_hmac_isha+280>)
0000097e:   adds    r2, r7, r2
00000980:   str     r3, [r2, #0]
117         for (int i=0; i<l; i++) {
00000982:   movs    r3, #0
00000984:   ldr     r2, [pc, #204]  ; (0xa54 <pbkdf2_hmac_isha+284>)
00000986:   adds    r2, r7, r2
00000988:   str     r3, [r2, #0]
0000098a:   b.n     0x9d6 <pbkdf2_hmac_isha+158>
118           F(pass, pass_len, salt, salt_len, iter, i+1, accumulator + i*ISHA_DIGESTLEN);
0000098c:   ldr     r6, [pc, #196]  ; (0xa54 <pbkdf2_hmac_isha+284>)
0000098e:   adds    r3, r7, r6
00000990:   ldr     r3, [r3, #0]
00000992:   adds    r3, #1
00000994:   movs    r5, r3
00000996:   adds    r3, r7, r6
00000998:   ldr     r2, [r3, #0]
0000099a:   movs    r3, r2
0000099c:   lsls    r3, r3, #2
0000099e:   adds    r3, r3, r2
000009a0:   lsls    r3, r3, #2
000009a2:   movs    r2, r3
000009a4:   movs    r3, #20
000009a6:   adds    r3, r7, r3
000009a8:   adds    r3, r3, r2
000009aa:   ldr     r4, [r7, #0]
000009ac:   ldr     r2, [r7, #4]
000009ae:   ldr     r1, [r7, #8]
000009b0:   ldr     r0, [r7, #12]
000009b2:   str     r3, [sp, #8]
000009b4:   str     r5, [sp, #4]
000009b6:   movs    r3, #163        ; 0xa3
000009b8:   lsls    r3, r3, #4
000009ba:   movs    r5, #8
000009bc:   mov     r12, r5
000009be:   add     r12, r7
000009c0:   add     r3, r12
000009c2:   ldr     r3, [r3, #0]
000009c4:   str     r3, [sp, #0]
000009c6:   movs    r3, r4
000009c8:   bl      0x75c <F>
117         for (int i=0; i<l; i++) {
000009cc:   adds    r3, r7, r6
000009ce:   ldr     r3, [r3, #0]
000009d0:   adds    r3, #1
000009d2:   adds    r2, r7, r6
000009d4:   str     r3, [r2, #0]
000009d6:   ldr     r3, [pc, #124]  ; (0xa54 <pbkdf2_hmac_isha+284>)
000009d8:   adds    r3, r7, r3
000009da:   ldr     r2, [r3, #0]
000009dc:   ldr     r3, [pc, #112]  ; (0xa50 <pbkdf2_hmac_isha+280>)
000009de:   adds    r3, r7, r3
000009e0:   ldr     r3, [r3, #0]
000009e2:   cmp     r2, r3
000009e4:   blt.n   0x98c <pbkdf2_hmac_isha+84>
120         for (size_t i=0; i<dkLen; i++) {
000009e6:   movs    r3, #0
000009e8:   ldr     r2, [pc, #108]  ; (0xa58 <pbkdf2_hmac_isha+288>)
000009ea:   adds    r2, r7, r2
000009ec:   str     r3, [r2, #0]
000009ee:   b.n     0xa22 <pbkdf2_hmac_isha+234>
121           DK[i] = accumulator[i];
000009f0:   ldr     r3, [pc, #104]  ; (0xa5c <pbkdf2_hmac_isha+292>)
000009f2:   movs    r2, #8
000009f4:   mov     r12, r2
000009f6:   add     r12, r7
000009f8:   add     r3, r12
000009fa:   ldr     r2, [r3, #0]
000009fc:   ldr     r0, [pc, #88]   ; (0xa58 <pbkdf2_hmac_isha+288>)
000009fe:   adds    r3, r7, r0
00000a00:   ldr     r3, [r3, #0]
00000a02:   adds    r3, r2, r3
00000a04:   ldr     r2, [pc, #88]   ; (0xa60 <pbkdf2_hmac_isha+296>)
00000a06:   movs    r1, #162        ; 0xa2
00000a08:   lsls    r1, r1, #4
00000a0a:   adds    r1, r7, r1
00000a0c:   adds    r1, r1, r2
00000a0e:   adds    r2, r7, r0
00000a10:   ldr     r2, [r2, #0]
00000a12:   adds    r2, r1, r2
00000a14:   ldrb    r2, [r2, #0]
00000a16:   strb    r2, [r3, #0]
120         for (size_t i=0; i<dkLen; i++) {
00000a18:   adds    r3, r7, r0
00000a1a:   ldr     r3, [r3, #0]
00000a1c:   adds    r3, #1
00000a1e:   adds    r2, r7, r0
00000a20:   str     r3, [r2, #0]
00000a22:   ldr     r3, [pc, #52]   ; (0xa58 <pbkdf2_hmac_isha+288>)
00000a24:   adds    r3, r7, r3
00000a26:   ldr     r2, [r3, #0]
00000a28:   ldr     r3, [pc, #28]   ; (0xa48 <pbkdf2_hmac_isha+272>)
00000a2a:   movs    r1, #8
00000a2c:   mov     r12, r1
00000a2e:   add     r12, r7
00000a30:   add     r3, r12
00000a32:   ldr     r3, [r3, #0]
00000a34:   cmp     r2, r3
00000a36:   bcc.n   0x9f0 <pbkdf2_hmac_isha+184>
123       }
00000a38:   nop     ; (mov r8, r8)
00000a3a:   nop     ; (mov r8, r8)
00000a3c:   mov     sp, r7
00000a3e:   ldr     r3, [pc, #36]   ; (0xa64 <pbkdf2_hmac_isha+300>)
00000a40:   add     sp, r3
00000a42:   pop     {r4, r5, r6, r7, pc}
00000a44:   bl      0xffdcda46
00000a48:   lsrs    r4, r6, #8
00000a4a:   movs    r0, r0
00000a4c:   add     r0, lr
00000a4e:   movs    r0, r0
00000a50:   lsrs    r4, r2, #8
00000a52:   movs    r0, r0
00000a54:   lsrs    r4, r3, #8
00000a56:   movs    r0, r0
00000a58:   lsrs    r0, r3, #8
00000a5a:   movs    r0, r0
00000a5c:   lsrs    r0, r7, #8
00000a5e:   movs    r0, r0
00000a60:   bl      0xffdf5a62
00000a64:   lsrs    r4, r4, #8
00000a66:   movs    r0, r0
 40       {
