          hmac_isha:
00003dbc:   push    {r4, r5, r7, lr}
00003dbe:   sub     sp, #336        ; 0x150
00003dc0:   add     r7, sp, #0
00003dc2:   str     r0, [r7, #12]
00003dc4:   str     r1, [r7, #8]
00003dc6:   str     r2, [r7, #4]
00003dc8:   str     r3, [r7, #0]
 28         if (key_len > ISHA_BLOCKLEN) {
00003dca:   ldr     r3, [r7, #8]
00003dcc:   cmp     r3, #64 ; 0x40
00003dce:   bls.n   0x3df6 <hmac_isha+58>
 30           ISHAReset(&ctx);
00003dd0:   movs    r4, #16
00003dd2:   adds    r3, r7, r4
00003dd4:   movs    r0, r3
00003dd6:   bl      0x55c <ISHAReset>
 31           ISHAInput(&ctx, key, key_len);
00003dda:   ldr     r2, [r7, #8]
00003ddc:   ldr     r1, [r7, #12]
00003dde:   adds    r3, r7, r4
00003de0:   movs    r0, r3
00003de2:   bl      0x3ca4 <ISHAInput>
 32           ISHAResult(&ctx, keypad);
00003de6:   movs    r3, #140        ; 0x8c
00003de8:   adds    r2, r7, r3
00003dea:   adds    r3, r7, r4
00003dec:   movs    r1, r2
00003dee:   movs    r0, r3
00003df0:   bl      0x3be4 <ISHAResult>
00003df4:   b.n     0x3e66 <hmac_isha+170>
 36           for (i=0; i<key_len; i++)
00003df6:   movs    r3, #0
00003df8:   movs    r2, #166        ; 0xa6
00003dfa:   lsls    r2, r2, #1
00003dfc:   adds    r2, r7, r2
00003dfe:   str     r3, [r2, #0]
00003e00:   b.n     0x3e28 <hmac_isha+108>
 37             keypad[i] = key[i];
00003e02:   ldr     r2, [r7, #12]
00003e04:   movs    r0, #166        ; 0xa6
00003e06:   lsls    r0, r0, #1
00003e08:   adds    r3, r7, r0
00003e0a:   ldr     r3, [r3, #0]
00003e0c:   adds    r3, r2, r3
00003e0e:   ldrb    r1, [r3, #0]
00003e10:   movs    r3, #140        ; 0x8c
00003e12:   adds    r2, r7, r3
00003e14:   adds    r3, r7, r0
00003e16:   ldr     r3, [r3, #0]
00003e18:   adds    r3, r2, r3
00003e1a:   adds    r2, r1, #0
00003e1c:   strb    r2, [r3, #0]
 36           for (i=0; i<key_len; i++)
00003e1e:   adds    r3, r7, r0
00003e20:   ldr     r3, [r3, #0]
00003e22:   adds    r3, #1
00003e24:   adds    r2, r7, r0
00003e26:   str     r3, [r2, #0]
00003e28:   movs    r1, #166        ; 0xa6
00003e2a:   lsls    r1, r1, #1
00003e2c:   adds    r3, r7, r1
00003e2e:   ldr     r2, [r3, #0]
00003e30:   ldr     r3, [r7, #8]
00003e32:   cmp     r2, r3
00003e34:   bcc.n   0x3e02 <hmac_isha+70>
 38           for(i=key_len; i<ISHA_BLOCKLEN; i++)
00003e36:   ldr     r3, [r7, #8]
00003e38:   adds    r2, r7, r1
00003e3a:   str     r3, [r2, #0]
00003e3c:   b.n     0x3e5a <hmac_isha+158>
 39             keypad[i] = 0x00;
00003e3e:   movs    r3, #140        ; 0x8c
00003e40:   adds    r2, r7, r3
00003e42:   movs    r1, #166        ; 0xa6
00003e44:   lsls    r1, r1, #1
00003e46:   adds    r3, r7, r1
00003e48:   ldr     r3, [r3, #0]
00003e4a:   adds    r3, r2, r3
00003e4c:   movs    r2, #0
00003e4e:   strb    r2, [r3, #0]
 38           for(i=key_len; i<ISHA_BLOCKLEN; i++)
00003e50:   adds    r3, r7, r1
00003e52:   ldr     r3, [r3, #0]
00003e54:   adds    r3, #1
00003e56:   adds    r2, r7, r1
00003e58:   str     r3, [r2, #0]
00003e5a:   movs    r3, #166        ; 0xa6
00003e5c:   lsls    r3, r3, #1
00003e5e:   adds    r3, r7, r3
00003e60:   ldr     r3, [r3, #0]
00003e62:   cmp     r3, #63 ; 0x3f
00003e64:   bls.n   0x3e3e <hmac_isha+130>
 43         for (i=0; i<ISHA_BLOCKLEN; i++) {
00003e66:   movs    r3, #0
00003e68:   movs    r2, #166        ; 0xa6
00003e6a:   lsls    r2, r2, #1
00003e6c:   adds    r2, r7, r2
00003e6e:   str     r3, [r2, #0]
00003e70:   b.n     0x3ec0 <hmac_isha+260>
 44           ipad[i] = keypad[i] ^ 0x36;
00003e72:   movs    r4, #140        ; 0x8c
00003e74:   adds    r2, r7, r4
00003e76:   movs    r0, #166        ; 0xa6
00003e78:   lsls    r0, r0, #1
00003e7a:   adds    r3, r7, r0
00003e7c:   ldr     r3, [r3, #0]
00003e7e:   adds    r3, r2, r3
00003e80:   ldrb    r3, [r3, #0]
00003e82:   movs    r2, #54 ; 0x36
00003e84:   eors    r3, r2
00003e86:   uxtb    r1, r3
00003e88:   movs    r3, #134        ; 0x86
00003e8a:   lsls    r3, r3, #1
00003e8c:   adds    r2, r7, r3
00003e8e:   adds    r3, r7, r0
00003e90:   ldr     r3, [r3, #0]
00003e92:   adds    r3, r2, r3
00003e94:   adds    r2, r1, #0
00003e96:   strb    r2, [r3, #0]
 45           opad[i] = keypad[i] ^ 0x5c;
00003e98:   adds    r2, r7, r4
00003e9a:   adds    r3, r7, r0
00003e9c:   ldr     r3, [r3, #0]
00003e9e:   adds    r3, r2, r3
00003ea0:   ldrb    r3, [r3, #0]
00003ea2:   movs    r2, #92 ; 0x5c
00003ea4:   eors    r3, r2
00003ea6:   uxtb    r1, r3
00003ea8:   movs    r3, #204        ; 0xcc
00003eaa:   adds    r2, r7, r3
00003eac:   adds    r3, r7, r0
00003eae:   ldr     r3, [r3, #0]
00003eb0:   adds    r3, r2, r3
00003eb2:   adds    r2, r1, #0
00003eb4:   strb    r2, [r3, #0]
00003eb6:   adds    r3, r7, r0
00003eb8:   ldr     r3, [r3, #0]
00003eba:   adds    r3, #1
00003ebc:   adds    r2, r7, r0
00003ebe:   str     r3, [r2, #0]
00003ec0:   movs    r3, #166        ; 0xa6
00003ec2:   lsls    r3, r3, #1
00003ec4:   adds    r3, r7, r3
00003ec6:   ldr     r3, [r3, #0]
00003ec8:   cmp     r3, #63 ; 0x3f
00003eca:   bls.n   0x3e72 <hmac_isha+182>
 49         ISHAReset(&ctx);
00003ecc:   movs    r4, #16
00003ece:   adds    r3, r7, r4
00003ed0:   movs    r0, r3
00003ed2:   bl      0x55c <ISHAReset>
 50         ISHAInput(&ctx, ipad, ISHA_BLOCKLEN);
00003ed6:   movs    r3, #134        ; 0x86
00003ed8:   lsls    r3, r3, #1
00003eda:   adds    r1, r7, r3
00003edc:   adds    r3, r7, r4
00003ede:   movs    r2, #64 ; 0x40
00003ee0:   movs    r0, r3
00003ee2:   bl      0x3ca4 <ISHAInput>
 51         ISHAInput(&ctx, msg, msg_len);
00003ee6:   ldr     r2, [r7, #0]
00003ee8:   ldr     r1, [r7, #4]
00003eea:   adds    r3, r7, r4
00003eec:   movs    r0, r3
00003eee:   bl      0x3ca4 <ISHAInput>
 52         ISHAResult(&ctx, inner_digest);
00003ef2:   movs    r5, #120        ; 0x78
00003ef4:   adds    r2, r7, r5
00003ef6:   adds    r3, r7, r4
00003ef8:   movs    r1, r2
00003efa:   movs    r0, r3
00003efc:   bl      0x3be4 <ISHAResult>
 55         ISHAReset(&ctx);
00003f00:   adds    r3, r7, r4
00003f02:   movs    r0, r3
00003f04:   bl      0x55c <ISHAReset>
 56         ISHAInput(&ctx, opad, ISHA_BLOCKLEN);
00003f08:   movs    r3, #204        ; 0xcc
00003f0a:   adds    r1, r7, r3
00003f0c:   adds    r3, r7, r4
00003f0e:   movs    r2, #64 ; 0x40
00003f10:   movs    r0, r3
00003f12:   bl      0x3ca4 <ISHAInput>
 57         ISHAInput(&ctx, inner_digest, ISHA_DIGESTLEN);
00003f16:   adds    r1, r7, r5
00003f18:   adds    r3, r7, r4
00003f1a:   movs    r2, #20
00003f1c:   movs    r0, r3
00003f1e:   bl      0x3ca4 <ISHAInput>
 58         ISHAResult(&ctx, digest);
00003f22:   movs    r3, #172        ; 0xac
00003f24:   lsls    r3, r3, #1
00003f26:   movs    r2, #8
00003f28:   mov     r12, r2
00003f2a:   add     r12, r7
00003f2c:   add     r3, r12
00003f2e:   ldr     r2, [r3, #0]
00003f30:   adds    r3, r7, r4
00003f32:   movs    r1, r2
00003f34:   movs    r0, r3
00003f36:   bl      0x3be4 <ISHAResult>
 59       }
00003f3a:   nop     ; (mov r8, r8)
00003f3c:   mov     sp, r7
00003f3e:   add     sp, #336        ; 0x150
00003f40:   pop     {r4, r5, r7, pc}
